/*---------------------------------------------------------
 * Copyright (C) Microsoft Corporation. All rights reserved.
 *--------------------------------------------------------*/

// AUTOGENERATED CODE, DO NOT EDIT

/* eslint-disable @typescript-eslint/no-empty-interface */

import * as grpc from '@grpc/grpc-js';
import type { CallOptionsFactory } from './options';
import { resolveCallOptions } from './util';

export interface ICallable<T> {
  exec<T>(
    service: keyof typeof Services,
    method: string,
    params: unknown,
    options?: grpc.CallOptions,
  ): Promise<T>;

  withConnection<R>(
    service: keyof typeof Services,
    fn: (args: { resource: T; client: grpc.Client; metadata: grpc.Metadata }) => Promise<R> | R,
  ): Promise<R>;

  markFailed(resource: T, error: Error): void;

  readonly callOptionsFactory: CallOptionsFactory | undefined;
}

export interface IResponseStream<T> {
  on(event: 'data', fn: (item: T) => void): this;
  on(event: 'end', fn: () => void): this;
  on(event: 'status', fn: (status: grpc.StatusObject) => void): this;
  on(event: 'error', fn: (err: Error) => void): this;
}

export interface IRequestStream<T> {
  write(item: T): void;
  end(): void;
  cancel(): void;
}

export interface IDuplexStream<T, R> extends IRequestStream<T>, IResponseStream<R> {}
